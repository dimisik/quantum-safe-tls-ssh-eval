#!/usr/bin/env python3

import argparse
import subprocess
import re

def parse_arguments():
    """
    Parse command-line arguments using argparse.
    """
    parser = argparse.ArgumentParser()
    parser.add_argument('--file', action='store', dest='filename', required=False,
                        default='test1.pcap', help='Name of tshark pcap file')
    parser.add_argument('--port', action='store', dest='port', type=int, required=False,
                        default=2221, help='TCP/TLS socket number')
    return parser.parse_args()

def execute_tshark(filename, port):
    """
    Execute tshark command to capture network traffic and return the decoded output.
    """
    tshark_cmd = 'tshark -r {} -d tcp.port=={},ssl -2R "ssh or tcp"'.format(filename, port)
    output = subprocess.Popen(tshark_cmd, shell=True, stdout=subprocess.PIPE).stdout.read().decode('utf-8')
    return output

def process_output(output):
    """
    Process the tshark output to extract relevant data into dictionaries.
    """
    loop_count = 0
    start_dict = {}
    finish_dict = {}
    start_time = 0
    rtt_start = 0
    tcp_retran_count = 0
    client_switch = 0
    server_switch = 0
    note = 0
    cert_flag = 0  # Toggle this variable for the commented-out section

    for line in output.split('\n'):
        line = line.strip(' ')  # Remove leading and trailing spaces from the line
        
        if 'TCP Retransmission' in line:
            tcp_retran_count += 1
        else:
            if '[SYN]' in line:
                # Handle the beginning of a session
                loop_count += 1
                tcp_retran_count = 0
                line = re.sub(' +', ' ', line)  # Replace multiple spaces with a single space
                line_list = line.split(' ')
                rtt_start = float(line_list[1])
                continue
            
            if '[SYN, ACK]' in line:
                # Handle SYN, ACK packets
                line = re.sub(' +', ' ', line)  # Replace multiple spaces with a single space
                line_list = line.split(' ')
                rtt = str(float(line_list[1]) - rtt_start)
                continue
            
            if 'Client: Protocol' in line:
                # Handle client protocol messages
                line = re.sub(' +', ' ', line)  # Replace multiple spaces with a single space
                line_list = line.split(' ')
                start_dict[loop_count] = '{},{},'.format(line_list[0], line_list[1])
                start_time = float(line_list[1])
                continue
            
            if '[RST, ACK]' in line:
                # Handle reset acknowledgment
                loop_count -= 1
                continue
            
            if 'Client: New Keys' in line:
                # Handle new keys exchanged by the client
                end_flag = 1
                client_switch = 0
                server_switch = 0
                note = 1
                continue
            
            if 'Client: Encrypted packet' in line:
                # Handle encrypted packets from the client
                if note == 1:
                    note = 0
                if server_switch == 1:
                    server_switch = 0
                    server_count += 1
                if server_count == 4:
                    client_switch = 1
                continue
            
            if 'Server: Encrypted packet' in line:
                # Handle encrypted packets from the server
                if note == 1:
                    server_count -= 1
                    note = 0
                server_switch = 1
                line = re.sub(' +', ' ', line)  # Replace multiple spaces with a single space
                line_list = line.split(' ')
                finish_dict[loop_count] = '{},{},{},{}'.format(line_list[0], line_list[1],
                                                                str(float(line_list[1]) - start_time), rtt)
                if client_switch == 1:
                    end_flag = 0

        # End of the session (look for the last Application data)
        # if cert_flag == 1 and 'Application Data' in line:
        #     Handle certificate data calculation if cert_flag is enabled
        #     line = re.sub(' +', ' ', line)  # Replace multiple spaces with a single space
        #     line_list = line.split(' ')
        #     Example: cert_data = cert_data + float(line_list[6])
        #     cert_stop = float(line_list[1])
        # else:
        #     line = re.sub(' +', ' ', line)  # Replace multiple spaces with a single space
        #     line_list = line.split(' ')
        #     finish_dict[loop_count] = '{},{},{},{},{},{},{}'.format(line_list[0], line_list[1],
        #                                                             str(float(line_list[1]) - start_time), rtt,
        #                                                             str(cert_dur), str(cert_data), str(tcp_retran_count))

    return loop_count, start_dict, finish_dict

def print_results(loop_count, start_dict, finish_dict):
    """
    Print the processed results in CSV format.
    """
    for loop in range(1, loop_count + 1):
        print_str = '{},{},{}'.format(loop, start_dict[loop], finish_dict[loop])
        print(print_str)

def main():
    """
    Main function to orchestrate the entire process.
    """
    args = parse_arguments()
    output = execute_tshark(args.filename, args.port)
    loop_count, start_dict, finish_dict = process_output(output)
    print_results(loop_count, start_dict, finish_dict)
    exit(0)

if __name__ == "__main__":
    main()
