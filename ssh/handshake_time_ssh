#!/usr/bin/env python2

import argparse
import subprocess
import re
import numpy as np

# Split out the command line
parser = argparse.ArgumentParser()
parser.add_argument('--file', action='store', dest='filename', required=False,
                    default='test1.pcap', help='Name of tshark pcap file')
parser.add_argument('--port', action='store', dest='port', required=False,
                    default=2221, help='TCP/TLS socket number')
arg = parser.parse_args()

# Build out the tshark command
tshark_cmd = 'tshark -r {} -d tcp.port=={},ssl -2R "ssh or tcp"'
tshark_cmd = tshark_cmd.format(arg.filename, arg.port,)

# Execute the tshark command
output = \
  subprocess.Popen(tshark_cmd, shell=True, stdout=subprocess.PIPE).stdout.read()

# Look for start/finish of the TLS session
loop_count = 0
start_dict = {}
finish_dict = {}
start_time=0
rtt_start=0
rtt=0
tcp_retran_count=0
client_switch = 0
server_switch = 0
note = 0
deb=0
for line in output.split('\n'):
    line = line.strip(' ')
    # Beginning of the session
    if line.find('TCP Retransmission') != -1: 
        tcp_retran_count += 1
    else:
        if line.find('[SYN]') != -1:
            server_count=0
            end_flag=0
            loop_count += 1
            tcp_retran_count=0
            line = re.sub(' +', ' ', line)
            line_list = line.split(' ')
            rtt_start=float(line_list[1])
            continue
        if line.find('[SYN, ACK]') != -1:
            line = re.sub(' +', ' ', line)
            line_list = line.split(' ')
            rtt = str(float(line_list[1])-rtt_start)
            continue   
        if line.find('Client: Protocol') != -1:
            line = re.sub(' +', ' ', line)
            line_list = line.split(' ')
            start_dict[loop_count] = '{},{},'.format(line_list[0], line_list[1],)
            start_time = float(line_list[1])
            continue
        if line.find('[RST, ACK]') != -1:
            loop_count -= 1
            continue           
        if line.find('Client: New Keys') != -1:
            end_flag = 1
            client_switch = 0
            server_switch = 0
            note = 1
            continue  
        if end_flag==1:       
            if line.find('Client: Encrypted packet') != -1:
            	if note ==1:
            		note=0
            	if server_switch == 1:
            		server_switch = 0
            		server_count+=1
            	if server_count == 4 :
            		client_switch =1
                continue  
            if line.find('Server: Encrypted packet') != -1:
            	if note==1:
            		server_count-=1
            		note=0
            	server_switch = 1            
                line = re.sub(' +', ' ', line) 
                line_list = line.split(' ')
                finish_dict[loop_count] = '{},{},{},{}'.format(line_list[0], line_list[1], \
                     str(float(line_list[1])- start_time), rtt )
                if client_switch == 1:
                	end_flag=0
         

    # # End of the session (look for the last Application data)
    # if line.find('Application Data') != -1:
    #     if cert_flag == 1:
    #         line = re.sub(' +', ' ', line)
    #         line_list = line.split(' ')
    #         cert_data = cert_data + float(line_list[6])
    #         cert_stop = float(line_list[1])
        # else:
        #     line = re.sub(' +', ' ', line)
        #     line_list = line.split(' ')
        #     finish_dict[loop_count] = '{},{},{},{},{},{},{}'.format(line_list[0], line_list[1], \
        #            str(float(line_list[1])- start_time), rtt, str(cert_dur), str(cert_data), str(tcp_retran_count))

# Print the results in CSV format
for loop in range(1, loop_count+1):
    print_str = str(loop) + ',' + str(start_dict[loop]) + str(finish_dict[loop]) 
    print print_str 
    
exit(0)